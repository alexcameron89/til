#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'til'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/til` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/til now"
  exit 64
end

include GLI::App

program_desc 'A command line daily journal for Today I Learned.'

version Til::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Adds a journal entry.'
arg_name 'message'
command :add do |c|
  c.desc 'shows a specific date'
	c.flag :d
  c.action do |global_options,options,args|
    file = File.open(ENV['HOME']+'/what_i_learned.txt','a')
 	  file.write("#{Time.now.strftime('%m/%d/%y %k:%M')}||#{args[0]}\n")
	  puts "Added your message."
  end
end

desc 'Shows the journal entries.'
command :show do |c|
	c.desc 'shows a specific date'
	c.arg_name 'date'
	c.flag :d
  c.action do |global_options,options,args|
  	file = File.open(ENV['HOME']+'/what_i_learned.txt','r')
		counter = 1
  	file.readlines.each do |l|
	    date, entry = l.split(/\|\|/)
			puts "ID: #{counter} - Date: #{date}"
			puts "===================="
			puts "#{entry}\n"
			counter += 1
 	  end
  end
end

desc 'Edits a journal entry.'
arg_name 'message'
command :edit do |c|
	c.desc "edits the message with that id."
	c.arg_name 'id'
	c.flag :i
  c.action do |global_options,options,args|
	  file = File.open(ENV['HOME']+'/what_i_learned.txt','r')
	  file_new = File.open(ENV['HOME']+'/what_i_learned.txt.new','w')
	  counter = 1
	  file.readlines.each do |l|
	    if counter == options[:d].to_i
	      file_new.write("#{Time.now.strftime('%m/%d/%y - %k:%M')}||#{args[0]}\n")
	      puts 'Message edited'
	    else
	      file_new.write(l)
	    end
	    counter +=1
 		end
		raise "Id #{options[:i]} doesn't exist. Try again." if counter < options[:i].to_i
	  `mv ~/what_i_learned.txt.new ~/what_i_learned.txt`
  end
end

desc 'Deletes a journal entry.'
arg_name 'id'
command :delete do |c|
  c.action do |global_options,options,args|
	  file = File.open(ENV['HOME']+'/what_i_learned.txt','r')
	  file_new = File.open(ENV['HOME']+'/what_i_learned.txt.new','w')
		counter = 1
	  file.readlines.each do |l|
	    date, _entry = l.split(/\|\|/)
	    if counter == args[0].to_i
				puts "Message on #{date} deleted."
			else
				file_new.write(l)
			end
			counter += 1
	  end
	  `mv ~/what_i_learned.txt.new ~/what_i_learned.txt`
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
