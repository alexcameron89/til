#!/usr/bin/env ruby
require 'gli'
require 'sqlite3'

include GLI::App

program_desc 'A command line daily journal for Today I Learned.'

version Til::VERSION

subcommand_option_handling :normal
arguments :strict
db_location = "#{ENV['HOME']}/.journal.db"

def ready_database
	db = SQLite3::Database.open("#{ENV['HOME']}/.journal.db")
	yield db
	db.close
end

desc 'Initiates the journal database.'
arg_name 'location'
command [:init, :i] do |c|
	c.desc 'chooses the location of the database'
	c.flag :l
	c.action do |global_options,options,args|
		unless File.exists?(db_location)
			db = SQLite3::Database.new(db_location)
			db.execute("CREATE TABLE entries(Id INTEGER PRIMARY KEY AUTOINCREMENT, Date DATETIME NOT NULL DEFAULT (DATETIME('now')), Message VARCHAR(255));")
			puts "Database created at #{db_location}."
		else
			raise "Database already exists at #{db_location}."
		end
	end
end

desc 'Adds a journal entry.'
arg_name 'message'
command [:add, :a] do |c|
  c.desc 'shows a specific date'
	c.flag :d
  c.action do |global_options,options,args|
		if args.empty?
			puts 'Please add a message.'
			exit
		end
		ready_database do |db|
			db.execute("INSERT INTO entries(Message) VALUES ('#{args[0]}');")
		end
	  puts "Added your message."
  end
end

desc 'Shows the journal entries.'
command [:show, :s] do |c|
	c.desc 'shows a specific date'
	c.arg_name 'date'
	c.flag :d
  c.action do |global_options,options,args|
 		ready_database do |db|
			if options[:d]
				puts db.execute("SELECT * FROM entries WHERE date BETWEEN '#{options[:d]} 01:00:00' AND '#{options[:d]} 23:59:59';")
			else
				puts db.execute("SELECT * FROM entries ORDER BY id DESC LIMIT 5;").reverse
			end
		end	
  end
end

desc 'Edits a journal entry.'
arg_name 'message'
command [:edit, :e] do |c|
	c.desc "edits the message with that id."
	c.arg_name 'id'
	c.flag :i
  c.action do |global_options,options,args|
  end
end

desc 'Deletes a journal entry.'
arg_name 'id'
command [:delete, :d] do |c|
  c.action do |global_options,options,args|
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
	puts exception
  puts exception.backtrace
end

exit run(ARGV)
